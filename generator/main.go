package main

import (
	"bytes"
	"fmt"
	"go/format"
	"log"
	"os"
	"path/filepath"
	"sort"
	"strings"

	"github.com/pioz/countries"
	"gopkg.in/yaml.v2"
)

type Generator struct {
	buf bytes.Buffer
}

func (g *Generator) Printf(format string, args ...interface{}) {
	fmt.Fprintf(&g.buf, format, args...)
}

func (g *Generator) format() []byte {
	src, err := format.Source(g.buf.Bytes())
	if err != nil {
		// Should never happen, but can arise when developing this code.
		// The user can compile the output to see the error.
		log.Printf("warning: internal error: invalid Go generated: %s", err)
		log.Printf("warning: compile the package to analyze the error")
		return g.buf.Bytes()
	}
	return src
}

func main() {
	if len(os.Args) != 2 {
		fmt.Fprintf(os.Stderr, "Usage %s <countries/data/path>\n", os.Args[0])
		os.Exit(2)
	}

	dataPath := os.Args[1]

	// Load countries data from yaml data files
	allCountries := make(map[string]countries.Country)
	err := loadCountries(filepath.Join(dataPath, "countries"), allCountries)
	if err != nil {
		log.Fatalf("writing output: %s", err)
	}
	// Load subdivisions data from yaml data files
	allSubdivisions := make(map[string]map[string]countries.Subdivision)
	err = loadSubdivisions(filepath.Join(dataPath, "subdivisions"), allSubdivisions)
	if err != nil {
		log.Fatalf("writing output: %s", err)
	}
	// Load translations data from yaml data files
	allTranslations := make(map[string]map[string]string)
	err = loadTranslations(filepath.Join(dataPath, "translations"), allTranslations)
	if err != nil {
		log.Fatalf("writing output: %s", err)
	}

	// Build and sort All slice
	var all []countries.Country
	for countryAlpha2, c := range allCountries {
		c.Subdivisions = allSubdivisions[countryAlpha2]
		all = append(all, c)
	}
	sort.Slice(all, func(i, j int) bool {
		return all[i].Alpha2 < all[j].Alpha2
	})

	// Generate
	g := Generator{}
	g.Printf("// Code generated by \"go run generator/main.go %s\"; DO NOT EDIT.\n", strings.Join(os.Args[1:], " "))
	g.Printf("\n")
	g.Printf("package countries\n")
	g.Printf("\n")

	g.Printf("var All = []Country{\n")
	for _, country := range all {
		g.Printf("  %s,\n", countryToCodeString(country))
	}
	g.Printf("}\n")

	g.Printf("\n")
	g.Printf("var countries = map[string]*Country{\n")
	for i, country := range all {
		g.Printf("  \"%s\": &All[%d],\n", country.Alpha2, i)
	}
	g.Printf("}\n")

	g.Printf("\n")
	g.Printf("var translations = map[string]map[string]string{\n")
	for locale, translations := range allTranslations {
		s := translationsToCodeString(translations)
		g.Printf("  \"%s\": %s,\n", locale, s)
	}
	g.Printf("}\n")

	g.Printf("\n")
	g.Printf("var Alpha2 = %#v\n", alpha2(all))

	g.Printf("\n")
	g.Printf("var Regions = %#v\n", regions(all))

	g.Printf("\n")
	g.Printf("var Subregions = %#v\n", subregions(all))

	// Format the output.
	src := g.format()

	// Write to file.
	err = os.WriteFile("countries.go", src, 0644)
	if err != nil {
		log.Fatalf("writing output: %s", err)
	}
}

func loadCountries(countriesPath string, out map[string]countries.Country) error {
	files, err := os.ReadDir(countriesPath)
	if err != nil {
		return err
	}
	for _, file := range files {
		path := filepath.Join(countriesPath, file.Name())
		buf, err := os.ReadFile(path)
		if err != nil {
			return err
		}
		err = yaml.Unmarshal(buf, &out)
		if err != nil {
			return err
		}
	}
	return nil
}

func loadSubdivisions(subdivisionsPath string, out map[string]map[string]countries.Subdivision) error {
	files, err := os.ReadDir(subdivisionsPath)
	if err != nil {
		return err
	}
	for _, file := range files {
		subdivisions := make(map[string]countries.Subdivision)
		path := filepath.Join(subdivisionsPath, file.Name())
		buf, err := os.ReadFile(path)
		if err != nil {
			return err
		}
		err = yaml.Unmarshal(buf, &subdivisions)
		if err != nil {
			panic(err)
		}
		countryAlpha2 := filenameToCountryAlpha2(file.Name())
		out[countryAlpha2] = subdivisions
	}
	return nil
}

func loadTranslations(translationsPath string, out map[string]map[string]string) error {
	files, err := os.ReadDir(translationsPath)
	if err != nil {
		return err
	}
	for _, file := range files {
		translations := make(map[string]string)
		path := filepath.Join(translationsPath, file.Name())
		buf, err := os.ReadFile(path)
		if err != nil {
			return err
		}
		err = yaml.Unmarshal(buf, &translations)
		if err != nil {
			return err
		}
		locale := filenameToLocale(file.Name())
		out[locale] = translations
	}
	return nil
}

func countryToCodeString(c countries.Country) string {
	s := fmt.Sprintf("%#v", c)
	s = strings.ReplaceAll(s, "countries.", "")
	s = strings.ReplaceAll(s, "Country{", "{")
	s = strings.ReplaceAll(s, ":Subdivision{", ":{")
	return s
}

func alpha2(countries []countries.Country) []string {
	result := make([]string, len(countries))
	for i := range countries {
		result[i] = countries[i].Alpha2
	}
	return result
}

func regions(countries []countries.Country) []string {
	var result []string
	set := make(map[string]struct{})
	for _, c := range countries {
		if c.Region != "" {
			set[c.Region] = struct{}{}
		}
	}
	for r := range set {
		result = append(result, r)
	}
	sort.Slice(result, func(i, j int) bool {
		return result[i] < result[j]
	})
	return result
}

func subregions(countries []countries.Country) []string {
	var result []string
	set := make(map[string]struct{})
	for _, c := range countries {
		if c.Subregion != "" {
			set[c.Subregion] = struct{}{}
		}
	}
	for r := range set {
		result = append(result, r)
	}
	sort.Slice(result, func(i, j int) bool {
		return result[i] < result[j]
	})
	return result
}

func translationsToCodeString(t map[string]string) string {
	s := fmt.Sprintf("%#v", t)
	s = strings.ReplaceAll(s, "map[string]string", "")
	return s
}

func filenameToCountryAlpha2(filename string) string {
	return strings.ReplaceAll(filename, ".yaml", "")
}

func filenameToLocale(filename string) string {
	s := strings.ReplaceAll(filename, ".yaml", "")
	s = strings.ReplaceAll(s, "countries-", "")
	return s
}
